// SPDX-License-Identifier: ISC
pragma solidity >=0.8.0;

// **NOTE** Generated code, do not modify.  Run 'npm run generate:constants'.

import { TestBase } from "forge-std/Test.sol";

library FraxtalTestnetL2 {
    uint256 internal constant CHAIN_ID = 2522;
    address internal constant FRAX = 0xFc00000000000000000000000000000000000001;
    address internal constant FXS = 0xFc00000000000000000000000000000000000002;
    address internal constant FPI = 0xFc00000000000000000000000000000000000003;
    address internal constant FPIS = 0xfc00000000000000000000000000000000000004;
    address internal constant SFRXETH = 0xFC00000000000000000000000000000000000005;
    address internal constant WFRXETH = 0xFC00000000000000000000000000000000000006;
    address internal constant FRAXSWAP_FACTORY = 0xbc679bdd1bA59654bD50DEB03fd80dC97c713fF2;
    address internal constant FRAXSWAP_ROUTER = 0x938d99A81814f66b01010d19DDce92A633441699;
    address internal constant FRAXSWAP_ROUTER_MULTIHOP = 0x509728dC748586214Fa30cEF61359f136523F24d;
    address internal constant COMPTROLLER = 0x8b1E899ec5d51387a41Ee68261149F7d3Dfd7160;
    address internal constant PROXY_ADMIN = 0xfC00000000000000000000000000000000000007;
    address internal constant CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;
    address internal constant ERC20_FACTORY_PROXY = 0x4200000000000000000000000000000000000012;
    address internal constant L2_STANDARD_BRIDGE_PROXY = 0x4200000000000000000000000000000000000010;
    address internal constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000016;
}

abstract contract AddressHelperFraxtalTestnetL2 is TestBase {
    constructor() {
        labelConstants();
    }

    function labelConstants() public {
        vm.label(0xFc00000000000000000000000000000000000001, "Constants.FXTL_TN_L2_FRAX");
        vm.label(0xFc00000000000000000000000000000000000002, "Constants.FXTL_TN_L2_FXS");
        vm.label(0xFc00000000000000000000000000000000000003, "Constants.FXTL_TN_L2_FPI");
        vm.label(0xfc00000000000000000000000000000000000004, "Constants.FXTL_TN_L2_FPIS");
        vm.label(0xFC00000000000000000000000000000000000005, "Constants.FXTL_TN_L2_SFRXETH");
        vm.label(0xFC00000000000000000000000000000000000006, "Constants.FXTL_TN_L2_WFRXETH");
        vm.label(0xbc679bdd1bA59654bD50DEB03fd80dC97c713fF2, "Constants.FXTL_TN_L2_FRAXSWAP_FACTORY");
        vm.label(0x938d99A81814f66b01010d19DDce92A633441699, "Constants.FXTL_TN_L2_FRAXSWAP_ROUTER");
        vm.label(0x509728dC748586214Fa30cEF61359f136523F24d, "Constants.FXTL_TN_L2_FRAXSWAP_ROUTER_MULTIHOP");
        vm.label(0x8b1E899ec5d51387a41Ee68261149F7d3Dfd7160, "Constants.FXTL_TN_L2_COMPTROLLER");
        vm.label(0xfC00000000000000000000000000000000000007, "Constants.FXTL_TN_L2_PROXY_ADMIN");
        vm.label(0x4200000000000000000000000000000000000007, "Constants.FXTL_TN_L2_CROSS_DOMAIN_MESSENGER");
        vm.label(0x4200000000000000000000000000000000000012, "Constants.FXTL_TN_L2_ERC20_FACTORY_PROXY");
        vm.label(0x4200000000000000000000000000000000000010, "Constants.FXTL_TN_L2_L2_STANDARD_BRIDGE_PROXY");
        vm.label(0x4200000000000000000000000000000000000016, "Constants.FXTL_TN_L2_L2_TO_L1_MESSAGE_PASSER");
    }
}
